package com.kleinpix.assignment7_back_end.Controller;


import com.kleinpix.assignment7_back_end.factories.CustomerFactory;
import com.kleinpix.assignment7_back_end.model.Customer;
import com.kleinpix.assignment7_back_end.repositories.CustomerRepository;
import com.kleinpix.assignment7_back_end.services.ServiceImpl.CustomerServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

    @Controller
    @RequestMapping(path = "/customer")
    public class CustomerController {

        @Autowired
        private CustomerServiceImpl customerService;

        private Customer customer;

        @CrossOrigin
        //  http://localhost:8088/customer/addCustomer?name=Hein&surname=Klein&email=kleinh001@gmail.com&password=H.K1234
        //@GetMapping(path = "/{orderId}/addCustomer")
        @PostMapping(path = "/addCustomer")
        public
        @ResponseBody
        Customer addCustomer(@RequestParam String name, @RequestParam String surname, @RequestParam String email, @RequestParam String password) {
            Map<String, String> values = new HashMap<String, String>();

            values.put("name", name);
            values.put("surname", surname);
            values.put("email", email);
            values.put("password", password);

            customer = CustomerFactory.getCustomer(values);

            return customerService.create(customer);
        }

        @CrossOrigin
        //http://localhost:8088/customer/findCustomerByID?customerID=1
        @GetMapping(path = "/findCustomerByID")
        public
        @ResponseBody
        Customer findCustomerByID(long customerID) {
            return customer = customerService.read(customerID);
        }

        @CrossOrigin
        @GetMapping(path = "/updateCustomer")
        public
        @ResponseBody
        Customer updateCustomer(@RequestParam long customerId, @RequestParam String name, @RequestParam String surname, @RequestParam String email,
                                @RequestParam String password) {


            Customer customerUpdate = new Customer.Builder()
                    .id(customerId)
                    .name(name)
                    .surname(surname)
                    .email(email)
                    .password(password)
                    .build();

            return customerService.update(customerUpdate);
        }

        @CrossOrigin
        @GetMapping(path = "/deleteCustomer")
        public
        @ResponseBody
        void deleteCustomer(@RequestParam long customerID) {
            customerService.delete(customerID);
        }

        @CrossOrigin
        @GetMapping(path = "/findAll")
        public @ResponseBody
        Iterable<Customer> getAllCustomers() {
            return customerService.findAll();
        }

        @CrossOrigin
        @GetMapping(path = "/findByEmail")
        public @ResponseBody
        Customer availableEmail(String email) {
            return customerService.availableEmail(email);
        }

        @CrossOrigin
        @GetMapping(path = "/findByPassword")
        public @ResponseBody
        Customer availablePassword(String password) {
            return customerService.availableEmail(password);
        }
    }



    /*
    @Controller   // This means that this class is a Controller
@RequestMapping(path="/customer")  // This means URL's start with /customer (after Application path)// Which is auto-generated by Spring, we will use it to handle the data
public class CustomerController {

    private Customer customer;

    @Autowired
    CustomerServiceImpl customerService;

    @Autowired   // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CustomerRepository customerRepository;

    @CrossOrigin
    @GetMapping(path = "/addCustomer") // Map ONLY GET Requests
    //@ResponseBody means the returned String is the response, not a view name
    public @ResponseBody
    Customer create(@RequestParam long id, String name, String surname, String email, String password) {

        customer = CustomerFactory.getCustomer(name, surname, email, password);
        return customerService.create(customer);
    }

    @CrossOrigin
    @GetMapping(path = "/findDetails")
    public @ResponseBody
    Customer findByNameAndSurnameAndEmailAndPassword(String name, String surname, String email, String password) {
        return customerService.findByNameAndSurnameAndEmailAndPassword("name", "surname", "email", "password");
    }

    @CrossOrigin
    @GetMapping(path="/findByEmail")
    public @ResponseBody Customer findByEmail(@RequestParam String email)
    {
        return customerService.findByEmail(email);
    }
    @CrossOrigin
    @GetMapping(path="/findBySurname")
    public @ResponseBody Customer findBySurname(@RequestParam String surname)
    {
        return customerService.findBySurname(surname);
    }

    @CrossOrigin
    @GetMapping(path="/login")
    public @ResponseBody Customer findByEmailAndPassword(@RequestParam String email, @RequestParam String password)
    {
        return customerService.findByEmailAndPassword(email, password);
    }
    */

